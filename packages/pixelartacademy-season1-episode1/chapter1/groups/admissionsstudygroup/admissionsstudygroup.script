# PixelArtAcademy.Season1.Episode1.Chapter1.Groups.AdmissionsStudyGroup

## Start
## JustOne

> _char_ sits down and waits for the study group meeting to start.

coordinator: Hello everyone!

person1: Hello! `_person1`
person2: Hey! `_person2`
person3: Hi! `_person3`

coordinator: 
  Let's start our study group meeting.
  I hope you've made good progress on your admission week tasks.
  We'll do a quick report of what you've been working on.
  Who wants to go first?

pause

<!-- Report -->

### WhatsNew

> You can now ask your groupmates more about the things they worked on, or report your own progress to continue.

## FollowUp

### FollowUp

-> [End]

## FollowUpEnd

* !Report own progress -> [ReportProgress]

## ReportProgress

### ReportProgress

coordinator: Good job!

<!-- Reciprocity -->

-> [ReciprocityStart] `_person1`

<!-- Don't show the dialog for no reciprocity if it hasn't been explained what it is yet. -->
-> [ReciprocityEnd] `not ReciprocityExplanation`

## NoReciprocity

coordinator: Since no-one else is here we'll skip the reciprocity round.

-> [ReciprocityEnd]

## ReciprocityStart

### ReciprocityStart

-> [ReciprocityShort] `ReciprocityExplanation`

## ReciprocityExplanation

coordinator: 
  Next up we'll do a reciprocity round.
  We're here to support each other and help in any way we can.
  
-> [Reciprocity]

## ReciprocityShort

coordinator:
  Next up is reciprocity.

## Reciprocity

coordinator: Would anyone like to ask or share anything with the group?

<!-- Reciprocity others -->

## ReciprocityOtherAsks

### ReciprocityOtherAsks

`_firstAnyoneElse = false`

## ReciprocityOtherAsksStart

coordinator: Anyone else has anything to share? `_reciprocityAsked and not _firstAnyoneElse`
coordinator: Anyone else? `_reciprocityAsked and _firstAnyoneElse`

-> [ReciprocityPlayer] `not _otherAsksLeft`

`if (_reciprocityAsked) _firstAnyoneElse = true;`

### ReciprocityOtherAsksStart

`_reciprocityAsked = true;`

pause

* !Reply -> [ReciprocityOtherAsksReply]
* !Continue -> [ReciprocityOtherAsksStart]

## ReciprocityOtherAsksReply

> Use the ![say](say "") command with the message in "quotes" to reply. Type ![continue](continue) to proceed with the meeting.

### ReciprocityOtherAsksReply

-> [ReciprocityOtherAsksCanceled] `not _reciprocityReplied`

<!-- We use this label to track if the player ever replied to something. -->

## ReciprocityOtherAsksRepliedSuccessfully 

-> [ReciprocityOtherAsksStart]

## ReciprocityOtherAsksCanceled

> _char_ changes their mind and doesn't reply.

-> [ReciprocityOtherAsksStart]

<!-- Reciprocity player -->

## ReciprocityPlayer

`_reciprocityAsked = false`

* !Ask or share something -> [ReciprocityAsk]
* !Continue -> [ReciprocityEnd]

## ReciprocityAsk

> Use the ![say](say "") command with the message in "quotes" to ask or share something. Type ![continue](continue) to proceed with the meeting.

### ReciprocityAsk

-> [ReciprocityAskCanceled] `not _reciprocityAsked`
-> [ReciprocityMemoryCreated] `MemoriesExplanation`

## MemoriesExplanation

> In order to not have to wait for others to reply in real-time, your SYNC device has recorded this moment as a memory.
> Using the Memories tab in your SYNC interface, you can return to any recorded point in the past.
> When other characters reply to your question, their answers will appear inside the memory.

-> [ReciprocityAskThankYou]

## ReciprocityMemoryCreated

> A new Memory was created for this conversation. Check your SYNC interface later to read any replies.

-> [ReciprocityAskThankYou]

## ReciprocityAskThankYou

coordinator: Thank you, _char_.

-> [AcceptanceCelebrationStart]

## ReciprocityAskCanceled

> _char_ changes their mind and doesn't say anything.

-> [ReciprocityEnd]

## ReciprocityEnd

-> [AcceptanceCelebrationStart]

## AcceptanceCelebrationStart 

-> [MeetingEnd] `not _acceptanceCelebration`

## AcceptanceCelebration

coordinator: Today we have a happy celebration moment!

## MeetingEnd

coordinator:
  OK, that's it for today.
  Keep up the pace and I'll see you next time.

-> [End]

## ContinueMeetingHint

-> [ContinueMeetingHintShort] `ContinueMeetingHintLong`

## ContinueMeetingHintLong

> You can add additional replies with the ![say](say "") command. You can also simply type your message within quotation marks.

## ContinueMeetingHintShort

> Type ![continue](continue) when you're ready to proceed with the meeting.

-> [End]

## NoOne

> _char_ sits down by _coordinator_.

coordinator: 
  Looks like it's just you today.
  But no problem, we'll catch up with the rest tomorrow.
  So, what have you been working on?
  
pause

-> [ReportProgress]

<!-- Not used in admission group hangout. -->

### JustOne

## End
